{"version":3,"sources":["components/Counter.js","actions/index.js","index.js"],"names":["Counter","props","increment","bind","decrement","reset","this","className","counter","onClick","React","Component","mapDispatchToProps","type","connect","state","initialState","store","createStore","action","console","log","ReactDOM","render","document","getElementById"],"mappings":"wUAYMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAODC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,MAAQ,EAAKA,MAAMF,KAAX,gBAVI,E,yEA0BjBG,KAAKL,MAAMC,c,kCAgBXI,KAAKL,MAAMG,c,8BAgBXE,KAAKL,MAAMI,U,+BAMX,OACE,yBAAKE,UAAU,WACb,uCACA,yBAAKA,UAAU,mBAWXD,KAAKL,MAAMO,SAGf,yBAAKD,UAAU,mBACb,4BAAQE,QAASH,KAAKJ,WAAtB,KACA,4BAAQO,QAASH,KAAKF,WAAtB,KACA,4BAAQK,QAASH,KAAKD,OAAtB,W,GArFYK,IAAMC,WAsGtBC,EAAqB,CACzBV,UC/GuB,WACvB,MAAO,CACLW,KANqB,cDoHvBT,UC1GuB,WACvB,MAAO,CACLS,KAXqB,cDoHvBR,MCrGmB,WACnB,MAAO,CACLQ,KAhBiB,WDiINC,eA1BS,SAACC,GACvB,MAAO,CACLP,QAASO,EAAMP,WAwBqBI,EAAzBE,CAA6Cd,G,OEzHtDgB,EAAe,CACnBR,QAAS,GA4BLS,EAAQC,aAzBE,WAAmC,IAAlCH,EAAiC,uDAAzBC,EAAcG,EAAW,uCAGhD,OAFAC,QAAQC,IAAI,QAASN,EAAOI,GAErBA,EAAON,MACZ,IAAK,YACH,MAAO,CACLL,QAASO,EAAMP,QAAU,GAE7B,IAAK,YACH,MAAO,CACLA,QAASO,EAAMP,QAAU,GAE7B,IAAK,QACH,MAAO,CACLA,QAAS,GAEb,QACE,OAAOO,EAEX,OAAOA,KAQTO,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,eAAe,W","file":"static/js/main.90814a37.chunk.js","sourcesContent":["import React from 'react';\nimport './Counter.css';\nimport { connect } from 'react-redux';\nimport { \n  // INCREMENT,\n  // DECREMENT,\n  // RESET,\n  increment,\n  decrement,\n  reset\n} from '../actions';\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    /**\n     * Local state approach\n     */\n    // this.state = {\n    //   counter: 0\n    // }\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  increment() {\n    /**\n     * Local state approach\n     */\n    // this.setState({\n    //   counter: this.state.counter + 1\n    // });\n\n    /**\n     * Global state approach\n     */\n    // this.props.dispatch({type: INCREMENT});\n    // this.props.dispatch(increment());\n    this.props.increment();\n  }\n\n  decrement() {\n    /**\n     * Local state approach\n     */\n    // this.setState({\n    //   counter: this.state.counter - 1\n    // })\n    \n    /**\n     * Global state approach\n     */\n    // this.props.dispatch({type: DECREMENT});\n    // this.props.dispatch(decrement());\n    this.props.decrement();\n  }\n\n  reset() {\n    /**\n     * Local state approach\n     */\n    // this.setState({\n    //   counter: 0\n    // });\n\n    /**\n     * Global state approach\n     */\n    // this.props.dispatch({type: RESET});\n    // this.props.dispatch(reset());\n    this.props.reset();\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"counter\">\n        <h1>Counter</h1>\n        <div className=\"counter--number\">\n          {\n            /**\n             * Local state approach\n             */\n            // this.state.counter\n          }\n          {\n            /**\n             * Global state approach\n             */\n            this.props.counter\n          }\n        </div>\n        <div className=\"button--wrapper\">\n          <button onClick={this.increment}>+</button>\n          <button onClick={this.decrement}>-</button>\n          <button onClick={this.reset}>R</button>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    counter: state.counter\n  }\n}\n\n/**\n * Version 1: mapDispatchToProps\n */\nconst mapDispatchToProps = {\n  increment,\n  decrement,\n  reset\n};\n\n/**\n * Version 2 mapDispatchToProps\n */\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     increment: () => dispatch(increment()),\n//     decrement: () => dispatch(decrement()),\n//     reset: () => dispatch(reset())\n//   }\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","export const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\nexport const RESET = 'RESET';\n\nexport const increment = () => {\n  return {\n    type: INCREMENT\n  }\n}\n\nexport const decrement = () => {\n  return {\n    type: DECREMENT\n  }\n}\n\nexport const reset = () => {\n  return {\n    type: RESET\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Counter from './components/Counter';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\n/***\n * Reducer\n */\nconst initialState = {\n  counter: 3\n}\n\nconst reducer = (state = initialState, action) => {\n  console.log('state', state, action)\n\n  switch(action.type) {\n    case 'INCREMENT':\n      return {\n        counter: state.counter + 1\n      };\n    case 'DECREMENT':\n      return {\n        counter: state.counter - 1\n      };\n    case 'RESET':\n      return {\n        counter: 0\n      };\n    default:\n      return state;\n  }\n  return state;\n}\n\n/**\n * Store\n */\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Counter />\n  </Provider>\n, document.getElementById('root'));"],"sourceRoot":""}